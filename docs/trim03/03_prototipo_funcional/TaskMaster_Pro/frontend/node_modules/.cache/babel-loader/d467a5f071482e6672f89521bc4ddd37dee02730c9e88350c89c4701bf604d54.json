{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"@/services/api\";\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, email, helpers } from '@vuelidate/validators';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    document.title = \"Recuperar Contraseña | TaskMaster Pro\";\n  },\n  data() {\n    return {\n      email: '',\n      backendErrors: {},\n      mensaje: {}\n    };\n  },\n  validations() {\n    return {\n      email: {\n        required: helpers.withMessage('El correo es obligatorio', required),\n        email: helpers.withMessage('Ingrese un email valido', email)\n      }\n    };\n  },\n  methods: {\n    async handleSubmit() {\n      this.mensaje = {};\n      this.backendErrors = {};\n      const isValid = await this.v$.$validate();\n      if (!isValid) return;\n      try {\n        const response = await api.post(\"/recoveryPassword\", {\n          email: this.email\n        });\n        console.log(response.data);\n        alert(response.data.message);\n        this.mensaje.email = 'Le hemos enviado un e-mail para que pueda recuperar la contraseña';\n        this.v$.email.$reset();\n      } catch (error) {\n        if (error.response && error.response.data) {\n          const serverErrors = error.response.data;\n          if (serverErrors.message === 'El usuario no existe') {\n            this.backendErrors.email = 'El usuario no existe';\n            this.v$.email.$reset();\n          } else {\n            alert(serverErrors.message);\n            console.log(serverErrors);\n          }\n        }\n      }\n    },\n    goLogin() {\n      this.$router.push('/iniciar-sesion');\n    }\n  }\n};","map":{"version":3,"names":["api","useVuelidate","required","email","helpers","setup","v$","mounted","document","title","data","backendErrors","mensaje","validations","withMessage","methods","handleSubmit","isValid","$validate","response","post","console","log","alert","message","$reset","error","serverErrors","goLogin","$router","push"],"sources":["C:\\xampp\\htdocs\\TaskMasterPro\\docs\\trim03\\03_prototipo_funcional\\TaskMaster_Pro\\frontend\\src\\components\\RecuperarContraseña.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"text-center\">\r\n          <h1 class=\"d-block mt-3\">Recuperar Contraseña</h1>\r\n        </div>\r\n        <form @submit.prevent=\"handleSubmit\" ref=\"form\" class=\"mx-auto needs-validation custom-recuperarContraseña\"\r\n          novalidate>\r\n\r\n          <!-- Campo para Correo Electrónico -->\r\n          <div class=\"mb-3\">\r\n            <label for=\"email\" class=\"form-label\">Correo Electrónico</label>\r\n            <div class=\"input-group mb-3 has-validation\">\r\n              <span class=\"input-group-text\"><i class=\"fa-regular fa-envelope\"></i></span>\r\n              <div class=\"form-floating\">\r\n                <input v-model=\"email\" type=\"email\" class=\"form-control border-input\"\r\n                  :class=\"{ 'is-invalid': v$.email.$error || backendErrors.email, 'is-valid': !v$.email.$invalid && !backendErrors.email && email }\"\r\n                  id=\"email\" placeholder=\"Correo electrónico\" @blur=\"v$.email.$touch()\" />\r\n                <div v-for=\"error in v$.email.$errors\" :key=\"error.$uid\" class=\"invalid-feedback\">\r\n                  {{ error.$message }}\r\n                </div>\r\n                <div v-if=\"backendErrors.email\" class=\"invalid-feedback\">\r\n                  {{ backendErrors.email }}\r\n                </div>\r\n                <div v-if=\"mensaje.email && !v$.email.$error && !backendErrors.email\" class=\"valid-feedback\">\r\n                  {{ mensaje.email }}\r\n                </div>\r\n                <label for=\"email\">Correo Electrónico</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <p class=\"text-center\">\r\n            ¿Tienes una cuenta?\r\n            <a class=\"buton-intentar-accesso\" @click=\"goLogin\">\r\n              Volver a intentar el acceso\r\n            </a>\r\n          </p>\r\n          <!-- Botón de Enviar -->\r\n          <div class=\"d-grid gap-2 col-6 mx-auto\">\r\n            <button class=\"btn btn-primary mt-4 buton-recuperar-contraseña\" type=\"submit\">Recuperar contraseña</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/services/api\";\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required, email, helpers } from '@vuelidate/validators';\r\nexport default {\r\n  setup() {\r\n    return { v$: useVuelidate() };\r\n  },\r\n  mounted() {\r\n    document.title = \"Recuperar Contraseña | TaskMaster Pro\";\r\n  },\r\n  data() {\r\n    return {\r\n      email: '',\r\n      backendErrors: {},\r\n      mensaje: {}\r\n    };\r\n  },\r\n  validations() {\r\n    return {\r\n      email: {\r\n        required: helpers.withMessage('El correo es obligatorio', required),\r\n        email: helpers.withMessage('Ingrese un email valido', email),\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    async handleSubmit() {\r\n      this.mensaje = {};\r\n      this.backendErrors = {};\r\n      const isValid = await this.v$.$validate();\r\n      if (!isValid) return;\r\n      try {\r\n        const response = await api.post(\"/recoveryPassword\", {\r\n          email: this.email\r\n        });\r\n        console.log(response.data);\r\n        alert(response.data.message);\r\n        this.mensaje.email = 'Le hemos enviado un e-mail para que pueda recuperar la contraseña';\r\n        this.v$.email.$reset();\r\n      } catch (error) {\r\n        if (error.response && error.response.data) {\r\n          const serverErrors = error.response.data;\r\n          if (serverErrors.message === 'El usuario no existe') {\r\n            this.backendErrors.email = 'El usuario no existe';\r\n            this.v$.email.$reset();\r\n          } else {\r\n            alert(serverErrors.message);\r\n            console.log(serverErrors);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    goLogin() {\r\n      this.$router.push('/iniciar-sesion');\r\n    }\r\n  }\r\n};\r\n\r\n</script>\r\n"],"mappings":";AAiDA,OAAOA,GAAE,MAAO,gBAAgB;AAChC,SAASC,YAAW,QAAS,iBAAiB;AAC9C,SAASC,QAAQ,EAAEC,KAAK,EAAEC,OAAM,QAAS,uBAAuB;AAChE,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,OAAO;MAAEC,EAAE,EAAEL,YAAY,CAAC;IAAE,CAAC;EAC/B,CAAC;EACDM,OAAOA,CAAA,EAAG;IACRC,QAAQ,CAACC,KAAI,GAAI,uCAAuC;EAC1D,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLP,KAAK,EAAE,EAAE;MACTQ,aAAa,EAAE,CAAC,CAAC;MACjBC,OAAO,EAAE,CAAC;IACZ,CAAC;EACH,CAAC;EACDC,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLV,KAAK,EAAE;QACLD,QAAQ,EAAEE,OAAO,CAACU,WAAW,CAAC,0BAA0B,EAAEZ,QAAQ,CAAC;QACnEC,KAAK,EAAEC,OAAO,CAACU,WAAW,CAAC,yBAAyB,EAAEX,KAAK;MAC7D;IACF;EACF,CAAC;EACDY,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI,CAACJ,OAAM,GAAI,CAAC,CAAC;MACjB,IAAI,CAACD,aAAY,GAAI,CAAC,CAAC;MACvB,MAAMM,OAAM,GAAI,MAAM,IAAI,CAACX,EAAE,CAACY,SAAS,CAAC,CAAC;MACzC,IAAI,CAACD,OAAO,EAAE;MACd,IAAI;QACF,MAAME,QAAO,GAAI,MAAMnB,GAAG,CAACoB,IAAI,CAAC,mBAAmB,EAAE;UACnDjB,KAAK,EAAE,IAAI,CAACA;QACd,CAAC,CAAC;QACFkB,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACT,IAAI,CAAC;QAC1Ba,KAAK,CAACJ,QAAQ,CAACT,IAAI,CAACc,OAAO,CAAC;QAC5B,IAAI,CAACZ,OAAO,CAACT,KAAI,GAAI,mEAAmE;QACxF,IAAI,CAACG,EAAE,CAACH,KAAK,CAACsB,MAAM,CAAC,CAAC;MACxB,EAAE,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,CAACP,QAAO,IAAKO,KAAK,CAACP,QAAQ,CAACT,IAAI,EAAE;UACzC,MAAMiB,YAAW,GAAID,KAAK,CAACP,QAAQ,CAACT,IAAI;UACxC,IAAIiB,YAAY,CAACH,OAAM,KAAM,sBAAsB,EAAE;YACnD,IAAI,CAACb,aAAa,CAACR,KAAI,GAAI,sBAAsB;YACjD,IAAI,CAACG,EAAE,CAACH,KAAK,CAACsB,MAAM,CAAC,CAAC;UACxB,OAAO;YACLF,KAAK,CAACI,YAAY,CAACH,OAAO,CAAC;YAC3BH,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;UAC3B;QACF;MACF;IACF,CAAC;IACDC,OAAOA,CAAA,EAAG;MACR,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;IACtC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}