{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"@/services/api\";\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, helpers } from '@vuelidate/validators';\nimport { maxLength } from 'vuelidate/lib/validators';\nimport { minLength } from 'vuelidate/lib/validators';\nimport { useRoute } from \"vue-router\";\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    document.title = \"Crear Clave | TaskMaster Pro\";\n  },\n  data() {\n    return {\n      password: \"\",\n      confirmPassword: \"\",\n      showPassword: false,\n      errors: {},\n      token: null,\n      backendErrors: {}\n    };\n  },\n  validations() {\n    return {\n      password: {\n        required: helpers.withMessage('Ingresa la nueva contraseña', required),\n        minLength: helpers.withMessage('Minimo 8 caracteres', minLength(8)),\n        maxLength: helpers.withMessage('Maximo 20 caracteres', maxLength(20)),\n        strong: helpers.withMessage('Debe contener mayusculas, minusculas y un caracter especial (#$*)', value => /^(?=.*[a-z])(?=.*[A-Z])(?=.*[#$*]).{8,}$/.test(value))\n      },\n      confirmPassword: {\n        required: helpers.withMessage('Confirma la contraseña', required)\n      }\n    };\n  },\n  created() {\n    const route = useRoute();\n    this.token = route.params.token;\n  },\n  methods: {\n    async handleSubmit() {\n      const isValid = await this.v$.$validate();\n      if (!isValid) return;\n      if (this.password === this.confirmPassword) {\n        try {\n          const response = await api.post(`/recoveryPassword/${this.token}`, {\n            password: this.password\n          });\n          console.log(response.data);\n          alert(response.data.message);\n          this.$router.push('/iniciar-sesion');\n        } catch (error) {\n          if (error.response && error.response.data) {\n            const serverErrors = error.response.data;\n            if (serverErrors.message === 'Token invalido o expirado') {\n              alert('Token invalido o expirado');\n              this.backendErrors.confirmPassword = 'Token invalido o expirado';\n              this.v$.confirmPassword.$reset();\n            } else {\n              alert(serverErrors.message);\n              console.log(serverErrors);\n              this.$router.push('/error500');\n            }\n          }\n        }\n      } else {\n        this.backendErrors.confirmPassword = 'Contraseñas no coinciden';\n        this.v$.confirmPassword.$reset();\n      }\n    },\n    togglePassword(field) {\n      if (field === 1) {\n        this.showPassword = !this.showPassword;\n      } else if (field === 2) {\n        this.showConfirmPassword = !this.showConfirmPassword;\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","useVuelidate","required","helpers","maxLength","minLength","useRoute","setup","v$","mounted","document","title","data","password","confirmPassword","showPassword","errors","token","backendErrors","validations","withMessage","strong","value","test","created","route","params","methods","handleSubmit","isValid","$validate","response","post","console","log","alert","message","$router","push","error","serverErrors","$reset","togglePassword","field","showConfirmPassword"],"sources":["C:\\xampp\\htdocs\\TaskMasterPro\\docs\\trim03\\03_prototipo_funcional\\TaskMaster_Pro\\frontend\\src\\components\\crearClave.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"text-center\">\r\n          <h1 class=\"d-block mt-3\">Crear Contraseña</h1>\r\n        </div>\r\n        <form @submit.prevent=\"handleSubmit\" ref=\"form\" class=\"mx-auto needs-validation custom-recuperarContraseña\"\r\n          novalidate>\r\n\r\n          <!-- Campo para Nueva Contraseña -->\r\n          <div class=\"mb-3\">\r\n            <label for=\"password\" class=\"form-label\">Nueva Contraseña*</label>\r\n            <div class=\"input-group mb-3 has-validation\">\r\n              <span class=\"input-group-text\"><i class=\"fa-solid fa-lock\"></i></span>\r\n              <div class=\"form-floating\">\r\n                <input v-model=\"password\" :type=\"showPassword ? 'text' : 'password'\" class=\"form-control border-input\"\r\n                  :class=\"{ 'is-invalid': v$.password.$error, 'is-valid': !v$.password.$invalid }\" id=\"password\"\r\n                  placeholder=\"Nueva contraseña\" @blur=\"v$.password.$touch()\" />\r\n                <div v-for=\"error in v$.password.$errors\" :key=\"error.$uid\" class=\"invalid-feedback\">\r\n                  {{ error.$message }}\r\n                </div>\r\n                <label for=\"password\">Ingresa una nueva contraseña</label>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Campo para Repetir Contraseña -->\r\n          <div class=\"mb-3 mt-4\">\r\n            <label for=\"confirmPassword\" class=\"form-label\">Repetir Contraseña*</label>\r\n            <div class=\"input-group mb-3 has-validation\">\r\n              <span class=\"input-group-text\"><i class=\"fa-solid fa-lock\"></i></span>\r\n              <div class=\"form-floating\">\r\n                <input v-model=\"confirmPassword\" :type=\"showPassword ? 'text' : 'password'\"\r\n                  class=\"form-control border-input\"\r\n                  :class=\"{ 'is-invalid': v$.confirmPassword.$error || backendErrors.confirmPassword, 'is-valid': !v$.confirmPassword.$invalid && !backendErrors.confirmPassword && confirmPassword }\"\r\n                  id=\"confirmPassword\" placeholder=\"Repetir contraseña\" @blur=\"v$.confirmPassword.$touch()\" />\r\n                <div v-for=\"error in v$.confirmPassword.$errors\" :key=\"error.$uid\" class=\"invalid-feedback\">\r\n                  {{ error.$message }}\r\n                </div>\r\n                <div v-if=\"backendErrors.confirmPassword\" class=\"invalid-feedback\">\r\n                  {{ backendErrors.confirmPassword }}\r\n                </div>\r\n                <label for=\"confirmPassword\">Confirmar contraseña</label>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div class=\"form-check form-switch ver-contraseña\">\r\n            <input v-model=\"showPassword\" class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"viewPassword\"\r\n              @change=\"togglePasswordVisibility\" />\r\n            <label class=\"form-check-label\" for=\"viewPassword\">Ver Contraseña</label>\r\n          </div>\r\n\r\n\r\n          <!-- Botón de Enviar -->\r\n          <div class=\"d-grid gap-2 col-4 mx-auto\">\r\n            <button class=\"btn btn-primary mt-3 buton-recuperar-contraseña\" type=\"submit\">Guardar</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/services/api\";\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required, helpers } from '@vuelidate/validators';\r\nimport { maxLength } from 'vuelidate/lib/validators';\r\nimport { minLength } from 'vuelidate/lib/validators';\r\nimport { useRoute } from \"vue-router\";\r\n\r\nexport default {\r\n  setup() {\r\n    return { v$: useVuelidate() };\r\n  },\r\n  mounted() {\r\n    document.title = \"Crear Clave | TaskMaster Pro\";\r\n  },\r\n  data() {\r\n    return {\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      showPassword: false,\r\n      errors: {},\r\n      token: null,\r\n      backendErrors: {}\r\n    };\r\n  },\r\n  validations() {\r\n    return {\r\n      password: {\r\n        required: helpers.withMessage('Ingresa la nueva contraseña', required),\r\n        minLength: helpers.withMessage('Minimo 8 caracteres', minLength(8)),\r\n        maxLength: helpers.withMessage('Maximo 20 caracteres', maxLength(20)),\r\n        strong: helpers.withMessage(\r\n          'Debe contener mayusculas, minusculas y un caracter especial (#$*)',\r\n          (value) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*[#$*]).{8,}$/.test(value)\r\n        )\r\n      },\r\n      confirmPassword: {\r\n        required: helpers.withMessage('Confirma la contraseña', required)\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    const route = useRoute();\r\n    this.token = route.params.token;\r\n  },\r\n  methods: {\r\n    async handleSubmit() {\r\n      const isValid = await this.v$.$validate();\r\n      if (!isValid) return;\r\n      if (this.password === this.confirmPassword) {\r\n        try {\r\n          const response = await api.post(`/recoveryPassword/${this.token}`, {\r\n            password: this.password\r\n          });\r\n          console.log(response.data);\r\n          alert(response.data.message);\r\n          this.$router.push('/iniciar-sesion');\r\n        } catch (error) {\r\n          if (error.response && error.response.data) {\r\n            const serverErrors = error.response.data;\r\n            if (serverErrors.message === 'Token invalido o expirado') {\r\n              alert('Token invalido o expirado');\r\n              this.backendErrors.confirmPassword = 'Token invalido o expirado';\r\n              this.v$.confirmPassword.$reset();\r\n            } else {\r\n              alert(serverErrors.message);\r\n              console.log(serverErrors);\r\n              this.$router.push('/error500');\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        this.backendErrors.confirmPassword = 'Contraseñas no coinciden';\r\n        this.v$.confirmPassword.$reset();\r\n      }\r\n\r\n    },\r\n    togglePassword(field) {\r\n      if (field === 1) {\r\n        this.showPassword = !this.showPassword;\r\n      } else if (field === 2) {\r\n        this.showConfirmPassword = !this.showConfirmPassword;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}