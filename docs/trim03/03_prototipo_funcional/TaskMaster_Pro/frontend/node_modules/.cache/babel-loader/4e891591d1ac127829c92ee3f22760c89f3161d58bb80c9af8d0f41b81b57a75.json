{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '@/services/api';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, helpers } from '@vuelidate/validators';\nimport { minLength, maxLength } from 'vuelidate/lib/validators';\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  mounted() {\n    document.title = \"Cambiar Clave | TaskMaster Pro\";\n  },\n  data() {\n    return {\n      password: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n      showPassword: false,\n      backendErrors: {}\n    };\n  },\n  validations() {\n    return {\n      password: {\n        required: helpers.withMessage('La contraseña actual es obligatoria', required)\n      },\n      newPassword: {\n        required: helpers.withMessage('Ingresa la nueva contraseña', required),\n        minLength: helpers.withMessage('Minimo 8 caracteres', minLength(8)),\n        maxLength: helpers.withMessage('Maximo 20 caracteres', maxLength(20)),\n        strong: helpers.withMessage('Debe contener mayusculas, minusculas y un caracter especial (#$*)', value => /^(?=.*[a-z])(?=.*[A-Z])(?=.*[#$*]).{8,}$/.test(value))\n      },\n      confirmPassword: {\n        required: helpers.withMessage('Confirma tu contraseña', required)\n      }\n    };\n  },\n  methods: {\n    async handleSubmit() {\n      const isValid = await this.v$.$validate();\n      if (!isValid) {\n        return;\n      } else if (this.newPassword === this.confirmPassword) {\n        try {\n          const response = await api.put('/editProfile', {\n            password: this.password,\n            newPassword: this.newPassword\n          });\n          console.log(response.data);\n          alert(response.data.message);\n          this.$router.push('/perfil-completo');\n        } catch (error) {\n          if (error.response && error.response.data) {\n            const serverErrors = error.response.data;\n            if (serverErrors.message === 'Contraseña no actualizada') {\n              console.log(serverErrors);\n              alert(`${serverErrors.message}, ingresa los parametros necesarios para realizar esta acción`);\n            } else if (serverErrors.message === 'Password Error') {\n              console.log(serverErrors);\n              alert(`Tu contraseña actual no coincide con la ingresada`);\n            } else if (serverErrors.message === 'Unregistered user') {\n              console.log(serverErrors);\n              alert(`${serverErrors.message}, el usuario que intentas actualizar no se encuentra en la base de datos.`);\n            } else if (serverErrors.mensaje === 'Usuario no autenticado') {\n              console.log(serverErrors);\n              alert(`${serverErrors.mensaje}, debes loguearte para editar tu perfil.`);\n              this.$router.push('/iniciar-sesion');\n            } else {\n              console.log(serverErrors);\n              this.$router.push('/error500');\n            }\n          }\n        }\n      } else {\n        this.backendErrors.confirmPassword = 'Contraseñas no coinciden';\n        this.v$.confirmPassword.$reset();\n      }\n    },\n    togglePassword(field) {\n      if (field === 1) {\n        this.showPassword = !this.showPassword;\n      } else if (field === 2) {\n        this.showConfirmPassword = !this.showConfirmPassword;\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","useVuelidate","required","helpers","minLength","maxLength","setup","v$","mounted","document","title","data","password","newPassword","confirmPassword","showPassword","backendErrors","validations","withMessage","strong","value","test","methods","handleSubmit","isValid","$validate","response","put","console","log","alert","message","$router","push","error","serverErrors","mensaje","$reset","togglePassword","field","showConfirmPassword"],"sources":["C:\\xampp\\htdocs\\TaskMasterPro\\docs\\trim03\\03_prototipo_funcional\\TaskMaster_Pro\\frontend\\src\\components\\cambiarClave.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div class=\"row justify-content-center\">\r\n            <div class=\"col-md-6\">\r\n                <div class=\"text-center\">\r\n                    <h1 class=\"d-block mt-3\">Modificar Contraseña</h1>\r\n                </div>\r\n                <form @submit.prevent=\"handleSubmit\" ref=\"form\"\r\n                    class=\"mx-auto needs-validation custom-recuperarContraseña\" novalidate>\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"password\" class=\"form-label\">Contraseña Actual*</label>\r\n                        <div class=\"input-group mb-3 has-validation\">\r\n                            <span class=\"input-group-text\"><i class=\"fa-solid fa-lock\"></i></span>\r\n                            <div class=\"form-floating\">\r\n                                <input v-model=\"password\" :type=\"showPassword ? 'text' : 'password'\"\r\n                                    class=\"form-control border-input\"\r\n                                    :class=\"{ 'is-invalid': v$.password.$error, 'is-valid': !v$.password.$invalid }\"\r\n                                    id=\"password\" placeholder=\"Nueva contraseña\" @blur=\"v$.password.$touch()\" />\r\n                                <div v-for=\"error in v$.password.$errors\" :key=\"error.$uid\" class=\"invalid-feedback\">\r\n                                    {{ error.$message }}\r\n                                </div>\r\n                                <label for=\"password\">Ingresa la contraseña actual</label>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Campo para Nueva Contraseña -->\r\n                    <div class=\"mb-3\">\r\n                        <label for=\"password\" class=\"form-label\">Nueva Contraseña*</label>\r\n                        <div class=\"input-group mb-3 has-validation\">\r\n                            <span class=\"input-group-text\"><i class=\"fa-solid fa-lock\"></i></span>\r\n                            <div class=\"form-floating\">\r\n                                <input v-model=\"newPassword\" :type=\"showPassword ? 'text' : 'password'\"\r\n                                    class=\"form-control border-input\"\r\n                                    :class=\"{ 'is-invalid': v$.newPassword.$error, 'is-valid': !v$.newPassword.$invalid }\"\r\n                                    id=\"password\" placeholder=\"Nueva contraseña\" @blur=\"v$.newPassword.$touch()\" />\r\n                                <div v-for=\"error in v$.newPassword.$errors\" :key=\"error.$uid\" class=\"invalid-feedback\">\r\n                                    {{ error.$message }}\r\n                                </div>\r\n                                <label for=\"password\">Ingresa una nueva contraseña</label>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Campo para Repetir Contraseña -->\r\n                    <div class=\"mb-3 mt-4\">\r\n                        <label for=\"confirmPassword\" class=\"form-label\">Repetir Contraseña*</label>\r\n                        <div class=\"input-group mb-3 has-validation\">\r\n                            <span class=\"input-group-text\"><i class=\"fa-solid fa-lock\"></i></span>\r\n                            <div class=\"form-floating\">\r\n                                <input v-model=\"confirmPassword\" :type=\"showPassword ? 'text' : 'password'\"\r\n                                    class=\"form-control border-input\"\r\n                                    :class=\"{ 'is-invalid': v$.confirmPassword.$error || backendErrors.confirmPassword, 'is-valid': !v$.confirmPassword.$invalid && !backendErrors.confirmPassword && confirmPassword }\"\r\n                                    id=\"confirmPassword\" placeholder=\"Repetir contraseña\"\r\n                                    @blur=\"v$.confirmPassword.$touch()\" />\r\n                                <div v-for=\"error in v$.confirmPassword.$errors\" :key=\"error.$uid\"\r\n                                    class=\"invalid-feedback\">\r\n                                    {{ error.$message }}\r\n                                </div>\r\n                                <div v-if=\"backendErrors.confirmPassword\" class=\"invalid-feedback\">\r\n                                    {{ backendErrors.confirmPassword }}\r\n                                </div>\r\n                                <label for=\"confirmPassword\">Confirmar contraseña</label>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-check form-switch ver-contraseña\">\r\n                        <input v-model=\"showPassword\" class=\"form-check-input\" type=\"checkbox\" role=\"switch\"\r\n                            id=\"viewPassword\" @change=\"togglePasswordVisibility\" />\r\n                        <label class=\"form-check-label\" for=\"viewPassword\">Ver Contraseña</label>\r\n                    </div>\r\n\r\n\r\n                    <!-- Botón de Enviar -->\r\n                    <div class=\"d-grid gap-2 col-4 mx-auto\">\r\n                        <button class=\"btn btn-primary mt-3 buton-recuperar-contraseña\" type=\"submit\">Guardar</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '@/services/api';\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required, helpers } from '@vuelidate/validators';\r\nimport { minLength, maxLength } from 'vuelidate/lib/validators';\r\nexport default {\r\n    setup() {\r\n        return { v$: useVuelidate() };\r\n    },\r\n    mounted() {\r\n        document.title = \"Cambiar Clave | TaskMaster Pro\";\r\n    },\r\n    data() {\r\n        return {\r\n            password: \"\",\r\n            newPassword: \"\",\r\n            confirmPassword: \"\",\r\n            showPassword: false,\r\n            backendErrors: {},\r\n        };\r\n    },\r\n    validations() {\r\n        return {\r\n            password: {\r\n                required: helpers.withMessage('La contraseña actual es obligatoria', required),\r\n            },\r\n            newPassword: {\r\n                required: helpers.withMessage('Ingresa la nueva contraseña', required),\r\n                minLength: helpers.withMessage('Minimo 8 caracteres', minLength(8)),\r\n                maxLength: helpers.withMessage('Maximo 20 caracteres', maxLength(20)),\r\n                strong: helpers.withMessage(\r\n                    'Debe contener mayusculas, minusculas y un caracter especial (#$*)',\r\n                    (value) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*[#$*]).{8,}$/.test(value)\r\n                )\r\n            },\r\n            confirmPassword: {\r\n                required: helpers.withMessage('Confirma tu contraseña', required),\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        async handleSubmit() {\r\n            const isValid = await this.v$.$validate();\r\n            if (!isValid) {\r\n                return;\r\n            }\r\n            else if (this.newPassword === this.confirmPassword) {\r\n                try {\r\n                    const response = await api.put('/editProfile', {\r\n                        password: this.password,\r\n                        newPassword: this.newPassword\r\n                    });\r\n                    console.log(response.data);\r\n                    alert(response.data.message);\r\n                    this.$router.push('/perfil-completo');\r\n                } catch (error) {\r\n                    if (error.response && error.response.data) {\r\n                        const serverErrors = error.response.data;\r\n                        if (serverErrors.message === 'Contraseña no actualizada') {\r\n                            console.log(serverErrors);\r\n                            alert(`${serverErrors.message}, ingresa los parametros necesarios para realizar esta acción`);\r\n                        } else if (serverErrors.message === 'Password Error') {\r\n                            console.log(serverErrors);\r\n                            alert(`Tu contraseña actual no coincide con la ingresada`);\r\n                        } else if (serverErrors.message === 'Unregistered user') {\r\n                            console.log(serverErrors);\r\n                            alert(`${serverErrors.message}, el usuario que intentas actualizar no se encuentra en la base de datos.`);\r\n                        } else if (serverErrors.mensaje === 'Usuario no autenticado') {\r\n                            console.log(serverErrors);\r\n                            alert(`${serverErrors.mensaje}, debes loguearte para editar tu perfil.`);\r\n                            this.$router.push('/iniciar-sesion');\r\n                        } else {\r\n                            console.log(serverErrors);\r\n                            this.$router.push('/error500');\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.backendErrors.confirmPassword = 'Contraseñas no coinciden';\r\n                this.v$.confirmPassword.$reset();\r\n            }\r\n        },\r\n        togglePassword(field) {\r\n            if (field === 1) {\r\n                this.showPassword = !this.showPassword;\r\n            } else if (field === 2) {\r\n                this.showConfirmPassword = !this.showConfirmPassword;\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}